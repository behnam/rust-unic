const INDENT: &'static str = "    ";
// this would be a const &'static str, but format! needs a literal. fight macros with macros:
// https://www.reddit.com/r/rust/comments/48jzw0/formatting_with_a_static_string_literal
macro_rules! preamble {
    () => {"// WARNING: Auto-generated by {}. DO NOT EDIT MANUALLY!"};
}

use std::io;
use std::io::Write;
use std::fs::File;
use std::path::Path;

use common::Dir;

fn escape_codepoint(codepoint: u32) -> String {
    // assert not is_surrogate(cp), "Trying to output a surrogate codepoint!"
    format!("\\u{{{:X}}}", codepoint)
}

fn literal_char(codepoint: u32) -> String {
    format!("\\{}\\", escape_codepoint(codepoint))
}

fn literal_string<I>(codepoints: I) -> String
where
    I: IntoIterator<Item = u32>,
{
    codepoints
        .into_iter()
        .map(escape_codepoint)
        .fold("\"".to_owned(), |acc, ref char| acc + char) + "\""
}

fn capitalize(str: &str) -> String {
    let mut chars = str.chars();
    match chars.next() {
        None => String::new(),
        Some(c) => c.to_uppercase().collect::<String>() + chars.as_str(),
    }
}

fn title_case(str: &str) -> String {
    str.split_whitespace()
        .map(capitalize)
        .fold(String::new(), |acc, ref word| acc + word)
}

pub fn emit_preamble(script: &str, output: &mut File) -> io::Result<()> {
    writeln!(output, preamble!(), script)
}
