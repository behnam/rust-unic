const INDENT: &'static str = "    ";

// this would be a const &'static str, but format! needs a literal. fight macros with macros:
// https://www.reddit.com/r/rust/comments/48jzw0/formatting_with_a_static_string_literal
macro_rules! preamble {
    () => {"// WARNING: Auto-generated by {}. DO NOT EDIT MANUALLY!"};
}

const LOW_SURROGATE: u32 = 0xD800;
const HIGH_SURROGATE: u32 = 0xDFFF;

use std::io;
use std::io::Write;
use std::fs::File;
use std::fmt::Display;

use common::Dir;

fn escape_char(codepoint: char) -> String {
    format!("\\u{{{:X}}}", codepoint as u32)
}

fn literal_char(codepoint: char) -> String {
    format!("\'{}\'", escape_char(codepoint))
}

fn literal_string<I>(codepoints: I) -> String
where
    I: IntoIterator<Item = char>,
{
    codepoints
        .into_iter()
        .map(escape_char)
        .fold("\"".to_owned(), |acc, ref char| acc + char) + "\""
}

fn capitalize(str: &str) -> String {
    let mut chars = str.chars();
    match chars.next() {
        None => String::new(),
        Some(c) => c.to_uppercase().collect::<String>() + chars.as_str(),
    }
}

fn title_case(str: &str) -> String {
    str.split_whitespace()
        .map(capitalize)
        .fold(String::new(), |acc, ref word| acc + word)
}

pub fn emit_preamble(script: &str, output: &mut File) -> io::Result<()> {
    writeln!(output, preamble!(), script)
}

pub fn emit_value<T, F, D>(
    script: &str,
    output: &mut File,
    value: T,
    formatter: F,
) -> io::Result<()>
where
    F: Fn(T) -> D,
    D: Display,
{
    emit_preamble(script, output)?;
    writeln!(output, "{}", formatter(value))
}

pub fn emit_strings<I, II, F, D>(
    script: &str,
    output: &mut File,
    strings: I,
    formatter: F,
) -> io::Result<()>
where
    I: IntoIterator<Item = II>,
    II: IntoIterator<Item = char>,
    F: Fn(&str) -> D,
    D: Display,
{
    let codepoints = strings.into_iter().map(|string| {
        string
            .into_iter()
            .map(|char| escape_char(char))
            .fold(String::new(), |acc, ref str| acc + str)
    }).fold(String::new(), |acc, ref str| acc + "\n" + str);
    emit_value(
        script,
        output,
        codepoints,
        |str| format!("\"\\\n{}\\\n\"", str),
    )
}
